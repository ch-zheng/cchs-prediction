# -*- coding: utf-8 -*-
"""statistical_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nNxnexRg4sC9YgoGyaPZF6RwU78oo2u2

# Preprocessing
"""

# import libraries
import numpy as np
from sklearn.model_selection import cross_val_score

# Commented out IPython magic to ensure Python compatibility.
# clone github repo
!git clone https://github.com/ch-zheng/cchs-prediction.git
# %cd cchs-prediction/

# load data
samples = np.load('data/samples.npy')
labels = np.load('data/labels.npy')

# initialize dictionary
avg_accuracy = {}
avg_accuracy["Multilayer Perceptron"] = 0.900 # mlp.py

"""# **Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()

scores = cross_val_score(model, samples, labels, cv=100)
avg_accuracy["Decision Tree"] = sum(scores) / len(scores)

"""# **Logistic Regression**"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(max_iter=1000)

scores = cross_val_score(model, samples, labels, cv=100, n_jobs=-1)
avg_accuracy["Logistic Regression"] = sum(scores) / len(scores)

"""# **LASSO Regression**"""

#tktk

"""# **Polynomial Regression**"""

#tktk

"""# **Ridge Regression**"""

from sklearn.linear_model import RidgeClassifier
model = RidgeClassifier()

scores = cross_val_score(model, samples, labels, cv=100)
avg_accuracy["Ridge Regression"] = sum(scores) / len(scores)

"""# **K-nearest neighbors**"""

from sklearn import neighbors
model = neighbors.KNeighborsClassifier(n_jobs=-1)

scores = cross_val_score(model, samples, labels, cv=100)
avg_accuracy["K-Nearest Neighbors"] = sum(scores) / len(scores)

"""# **Support Vector Machine**"""

from sklearn import svm
model = svm.SVC()

scores = cross_val_score(model, samples, labels, cv=100, n_jobs=-1)
avg_accuracy["SVM"] = sum(scores) / len(scores)

"""# **Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()

scores = cross_val_score(model, samples, labels, cv=100)
avg_accuracy["Naive Bayes"] = sum(scores) / len(scores)

"""# Display Metrics"""

# display avg accuracy
for i in sorted(avg_accuracy, key=avg_accuracy.get, reverse=True):
  print("%-30s%-20s" % (i, "{:.2f}".format(avg_accuracy[i]*100)))